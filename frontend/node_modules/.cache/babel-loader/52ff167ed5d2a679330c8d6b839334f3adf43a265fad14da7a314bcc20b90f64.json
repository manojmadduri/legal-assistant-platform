{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\root\\\\CascadeProjects\\\\legal-assistant-platform\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut as firebaseSignOut, onAuthStateChanged, sendPasswordResetEmail, updatePassword, sendEmailVerification } from 'firebase/auth';\nimport { auth } from '../config/firebase';\nimport api from '../services/api';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  userProfile: null,\n  loading: true,\n  signIn: async () => {},\n  signUp: async () => {},\n  signOut: async () => {},\n  resetPassword: async () => {},\n  updateUserPassword: async () => {},\n  updateUserProfile: async () => {},\n  resendVerificationEmail: async () => {}\n});\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const fetchUserProfile = async user => {\n    try {\n      const response = await api.get('/users/profile');\n      setUserProfile(response.data);\n\n      // Update last login time\n      await api.post('/users/login-timestamp');\n\n      // Show verification reminder if email is not verified\n      if (!user.emailVerified) {\n        toast.error('Please verify your email address. Check your inbox for the verification link.', {\n          duration: 7000\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n    }\n  };\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      setUser(user);\n      if (user) {\n        await fetchUserProfile(user);\n      } else {\n        setUserProfile(null);\n      }\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      const result = await signInWithEmailAndPassword(auth, email, password);\n      await fetchUserProfile(result.user);\n      return result;\n    } catch (error) {\n      if (error.code === 'auth/too-many-requests') {\n        throw new Error('Too many login attempts. Please try again later.');\n      }\n      throw error;\n    }\n  };\n  const signUp = async (email, password) => {\n    const result = await createUserWithEmailAndPassword(auth, email, password);\n    await sendEmailVerification(result.user);\n    return result;\n  };\n  const signOut = async () => {\n    try {\n      await firebaseSignOut(auth);\n      setUserProfile(null);\n      // Clear any local storage or session data\n      localStorage.removeItem('lastRoute');\n    } catch (error) {\n      throw error;\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      await sendPasswordResetEmail(auth, email);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const updateUserPassword = async newPassword => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      await updatePassword(user, newPassword);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const updateUserProfile = async data => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      const response = await api.put('/users/profile', data);\n      setUserProfile(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const resendVerificationEmail = async () => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      await sendEmailVerification(user);\n      toast.success('Verification email sent! Please check your inbox.');\n    } catch (error) {\n      if (error.code === 'auth/too-many-requests') {\n        throw new Error('Please wait before requesting another verification email.');\n      }\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    userProfile,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    updateUserPassword,\n    updateUserProfile,\n    resendVerificationEmail\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"WycvliXlKHiFjN+6Nj63IB/wNNM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","firebaseSignOut","onAuthStateChanged","sendPasswordResetEmail","updatePassword","sendEmailVerification","auth","api","toast","jsxDEV","_jsxDEV","AuthContext","user","userProfile","loading","signIn","signUp","resetPassword","updateUserPassword","updateUserProfile","resendVerificationEmail","useAuth","_s","AuthProvider","children","_s2","setUser","setUserProfile","setLoading","fetchUserProfile","response","get","data","post","emailVerified","error","duration","console","unsubscribe","email","password","result","code","Error","localStorage","removeItem","newPassword","put","success","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/root/CascadeProjects/legal-assistant-platform/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport {\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut as firebaseSignOut,\n  onAuthStateChanged,\n  sendPasswordResetEmail,\n  updatePassword,\n  sendEmailVerification,\n  User as FirebaseUser,\n} from 'firebase/auth';\nimport { auth } from '../config/firebase';\nimport api from '../services/api';\nimport toast from 'react-hot-toast';\n\nexport interface AuthContextType {\n  user: FirebaseUser | null;\n  userProfile: UserProfile | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<any>;\n  signUp: (email: string, password: string) => Promise<any>;\n  signOut: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  updateUserPassword: (newPassword: string) => Promise<void>;\n  updateUserProfile: (data: Partial<UserProfile>) => Promise<void>;\n  resendVerificationEmail: () => Promise<void>;\n}\n\ninterface UserProfile {\n  id: string;\n  email: string;\n  companyName: string;\n  businessType: string;\n  industry: string;\n  phone?: string;\n  address?: string;\n  createdAt: string;\n  updatedAt: string;\n  emailVerified: boolean;\n  lastLoginAt?: string;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  userProfile: null,\n  loading: true,\n  signIn: async () => {},\n  signUp: async () => {},\n  signOut: async () => {},\n  resetPassword: async () => {},\n  updateUserPassword: async () => {},\n  updateUserProfile: async () => {},\n  resendVerificationEmail: async () => {},\n});\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<FirebaseUser | null>(null);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const fetchUserProfile = async (user: FirebaseUser) => {\n    try {\n      const response = await api.get('/users/profile');\n      setUserProfile(response.data);\n      \n      // Update last login time\n      await api.post('/users/login-timestamp');\n      \n      // Show verification reminder if email is not verified\n      if (!user.emailVerified) {\n        toast.error(\n          'Please verify your email address. Check your inbox for the verification link.',\n          { duration: 7000 }\n        );\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n    }\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      setUser(user);\n      if (user) {\n        await fetchUserProfile(user);\n      } else {\n        setUserProfile(null);\n      }\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const result = await signInWithEmailAndPassword(auth, email, password);\n      await fetchUserProfile(result.user);\n      return result;\n    } catch (error: any) {\n      if (error.code === 'auth/too-many-requests') {\n        throw new Error('Too many login attempts. Please try again later.');\n      }\n      throw error;\n    }\n  };\n\n  const signUp = async (email: string, password: string) => {\n    const result = await createUserWithEmailAndPassword(auth, email, password);\n    await sendEmailVerification(result.user);\n    return result;\n  };\n\n  const signOut = async () => {\n    try {\n      await firebaseSignOut(auth);\n      setUserProfile(null);\n      // Clear any local storage or session data\n      localStorage.removeItem('lastRoute');\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    try {\n      await sendPasswordResetEmail(auth, email);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const updateUserPassword = async (newPassword: string) => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      await updatePassword(user, newPassword);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const updateUserProfile = async (data: Partial<UserProfile>) => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      const response = await api.put('/users/profile', data);\n      setUserProfile(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const resendVerificationEmail = async () => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      await sendEmailVerification(user);\n      toast.success('Verification email sent! Please check your inbox.');\n    } catch (error: any) {\n      if (error.code === 'auth/too-many-requests') {\n        throw new Error('Please wait before requesting another verification email.');\n      }\n      throw error;\n    }\n  };\n\n  const value = {\n    user,\n    userProfile,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    updateUserPassword,\n    updateUserProfile,\n    resendVerificationEmail,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}