{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{signInWithEmailAndPassword,createUserWithEmailAndPassword,signOut as firebaseSignOut,onAuthStateChanged,sendPasswordResetEmail,updatePassword,sendEmailVerification}from'firebase/auth';import{auth}from'../config/firebase';import api from'../services/api';import toast from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext({user:null,userProfile:null,loading:true,signIn:async()=>{},signUp:async()=>{},signOut:async()=>{},resetPassword:async()=>{},updateUserPassword:async()=>{},updateUserProfile:async()=>{},resendVerificationEmail:async()=>{}});export const useAuth=()=>{return useContext(AuthContext);};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[userProfile,setUserProfile]=useState(null);const[loading,setLoading]=useState(true);const fetchUserProfile=async user=>{try{const response=await api.get('/users/profile');setUserProfile(response.data);// Update last login time\nawait api.post('/users/login-timestamp');// Show verification reminder if email is not verified\nif(!user.emailVerified){toast.error('Please verify your email address. Check your inbox for the verification link.',{duration:7000});}}catch(error){console.error('Error fetching user profile:',error);}};useEffect(()=>{const unsubscribe=onAuthStateChanged(auth,async user=>{setUser(user);if(user){await fetchUserProfile(user);}else{setUserProfile(null);}setLoading(false);});return unsubscribe;},[]);const signIn=async(email,password)=>{try{const result=await signInWithEmailAndPassword(auth,email,password);await fetchUserProfile(result.user);return result;}catch(error){if(error.code==='auth/too-many-requests'){throw new Error('Too many login attempts. Please try again later.');}throw error;}};const signUp=async(email,password)=>{const result=await createUserWithEmailAndPassword(auth,email,password);await sendEmailVerification(result.user);return result;};const signOut=async()=>{try{await firebaseSignOut(auth);setUserProfile(null);// Clear any local storage or session data\nlocalStorage.removeItem('lastRoute');}catch(error){throw error;}};const resetPassword=async email=>{try{await sendPasswordResetEmail(auth,email);}catch(error){throw error;}};const updateUserPassword=async newPassword=>{try{if(!user)throw new Error('No user logged in');await updatePassword(user,newPassword);}catch(error){throw error;}};const updateUserProfile=async data=>{try{if(!user)throw new Error('No user logged in');const response=await api.put('/users/profile',data);setUserProfile(response.data);}catch(error){throw error;}};const resendVerificationEmail=async()=>{try{if(!user)throw new Error('No user logged in');await sendEmailVerification(user);toast.success('Verification email sent! Please check your inbox.');}catch(error){if(error.code==='auth/too-many-requests'){throw new Error('Please wait before requesting another verification email.');}throw error;}};const value={user,userProfile,loading,signIn,signUp,signOut,resetPassword,updateUserPassword,updateUserProfile,resendVerificationEmail};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","firebaseSignOut","onAuthStateChanged","sendPasswordResetEmail","updatePassword","sendEmailVerification","auth","api","toast","jsx","_jsx","AuthContext","user","userProfile","loading","signIn","signUp","resetPassword","updateUserPassword","updateUserProfile","resendVerificationEmail","useAuth","AuthProvider","_ref","children","setUser","setUserProfile","setLoading","fetchUserProfile","response","get","data","post","emailVerified","error","duration","console","unsubscribe","email","password","result","code","Error","localStorage","removeItem","newPassword","put","success","value","Provider"],"sources":["C:/Users/root/CascadeProjects/legal-assistant-platform/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport {\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut as firebaseSignOut,\n  onAuthStateChanged,\n  sendPasswordResetEmail,\n  updatePassword,\n  sendEmailVerification,\n  User as FirebaseUser,\n} from 'firebase/auth';\nimport { auth } from '../config/firebase';\nimport api from '../services/api';\nimport toast from 'react-hot-toast';\n\nexport interface AuthContextType {\n  user: FirebaseUser | null;\n  userProfile: UserProfile | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<any>;\n  signUp: (email: string, password: string) => Promise<any>;\n  signOut: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  updateUserPassword: (newPassword: string) => Promise<void>;\n  updateUserProfile: (data: Partial<UserProfile>) => Promise<void>;\n  resendVerificationEmail: () => Promise<void>;\n}\n\ninterface UserProfile {\n  id: string;\n  email: string;\n  companyName: string;\n  businessType: string;\n  industry: string;\n  phone?: string;\n  address?: string;\n  createdAt: string;\n  updatedAt: string;\n  emailVerified: boolean;\n  lastLoginAt?: string;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  userProfile: null,\n  loading: true,\n  signIn: async () => {},\n  signUp: async () => {},\n  signOut: async () => {},\n  resetPassword: async () => {},\n  updateUserPassword: async () => {},\n  updateUserProfile: async () => {},\n  resendVerificationEmail: async () => {},\n});\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<FirebaseUser | null>(null);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const fetchUserProfile = async (user: FirebaseUser) => {\n    try {\n      const response = await api.get('/users/profile');\n      setUserProfile(response.data);\n      \n      // Update last login time\n      await api.post('/users/login-timestamp');\n      \n      // Show verification reminder if email is not verified\n      if (!user.emailVerified) {\n        toast.error(\n          'Please verify your email address. Check your inbox for the verification link.',\n          { duration: 7000 }\n        );\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n    }\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      setUser(user);\n      if (user) {\n        await fetchUserProfile(user);\n      } else {\n        setUserProfile(null);\n      }\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const result = await signInWithEmailAndPassword(auth, email, password);\n      await fetchUserProfile(result.user);\n      return result;\n    } catch (error: any) {\n      if (error.code === 'auth/too-many-requests') {\n        throw new Error('Too many login attempts. Please try again later.');\n      }\n      throw error;\n    }\n  };\n\n  const signUp = async (email: string, password: string) => {\n    const result = await createUserWithEmailAndPassword(auth, email, password);\n    await sendEmailVerification(result.user);\n    return result;\n  };\n\n  const signOut = async () => {\n    try {\n      await firebaseSignOut(auth);\n      setUserProfile(null);\n      // Clear any local storage or session data\n      localStorage.removeItem('lastRoute');\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    try {\n      await sendPasswordResetEmail(auth, email);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const updateUserPassword = async (newPassword: string) => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      await updatePassword(user, newPassword);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const updateUserProfile = async (data: Partial<UserProfile>) => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      const response = await api.put('/users/profile', data);\n      setUserProfile(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const resendVerificationEmail = async () => {\n    try {\n      if (!user) throw new Error('No user logged in');\n      await sendEmailVerification(user);\n      toast.success('Verification email sent! Please check your inbox.');\n    } catch (error: any) {\n      if (error.code === 'auth/too-many-requests') {\n        throw new Error('Please wait before requesting another verification email.');\n      }\n      throw error;\n    }\n  };\n\n  const value = {\n    user,\n    userProfile,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    updateUserPassword,\n    updateUserProfile,\n    resendVerificationEmail,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OACEC,0BAA0B,CAC1BC,8BAA8B,CAC9BC,OAAO,GAAI,CAAAC,eAAe,CAC1BC,kBAAkB,CAClBC,sBAAsB,CACtBC,cAAc,CACdC,qBAAqB,KAEhB,eAAe,CACtB,OAASC,IAAI,KAAQ,oBAAoB,CACzC,MAAO,CAAAC,GAAG,KAAM,iBAAiB,CACjC,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBA6BpC,KAAM,CAAAC,WAAW,cAAGjB,aAAa,CAAkB,CACjDkB,IAAI,CAAE,IAAI,CACVC,WAAW,CAAE,IAAI,CACjBC,OAAO,CAAE,IAAI,CACbC,MAAM,CAAE,KAAAA,CAAA,GAAY,CAAC,CAAC,CACtBC,MAAM,CAAE,KAAAA,CAAA,GAAY,CAAC,CAAC,CACtBhB,OAAO,CAAE,KAAAA,CAAA,GAAY,CAAC,CAAC,CACvBiB,aAAa,CAAE,KAAAA,CAAA,GAAY,CAAC,CAAC,CAC7BC,kBAAkB,CAAE,KAAAA,CAAA,GAAY,CAAC,CAAC,CAClCC,iBAAiB,CAAE,KAAAA,CAAA,GAAY,CAAC,CAAC,CACjCC,uBAAuB,CAAE,KAAAA,CAAA,GAAY,CAAC,CACxC,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CAC3B,MAAO,CAAA1B,UAAU,CAACgB,WAAW,CAAC,CAChC,CAAC,CAED,MAAO,MAAM,CAAAW,YAAqD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAChF,KAAM,CAACX,IAAI,CAAEa,OAAO,CAAC,CAAG7B,QAAQ,CAAsB,IAAI,CAAC,CAC3D,KAAM,CAACiB,WAAW,CAAEa,cAAc,CAAC,CAAG9B,QAAQ,CAAqB,IAAI,CAAC,CACxE,KAAM,CAACkB,OAAO,CAAEa,UAAU,CAAC,CAAG/B,QAAQ,CAAC,IAAI,CAAC,CAE5C,KAAM,CAAAgC,gBAAgB,CAAG,KAAO,CAAAhB,IAAkB,EAAK,CACrD,GAAI,CACF,KAAM,CAAAiB,QAAQ,CAAG,KAAM,CAAAtB,GAAG,CAACuB,GAAG,CAAC,gBAAgB,CAAC,CAChDJ,cAAc,CAACG,QAAQ,CAACE,IAAI,CAAC,CAE7B;AACA,KAAM,CAAAxB,GAAG,CAACyB,IAAI,CAAC,wBAAwB,CAAC,CAExC;AACA,GAAI,CAACpB,IAAI,CAACqB,aAAa,CAAE,CACvBzB,KAAK,CAAC0B,KAAK,CACT,+EAA+E,CAC/E,CAAEC,QAAQ,CAAE,IAAK,CACnB,CAAC,CACH,CACF,CAAE,MAAOD,KAAK,CAAE,CACdE,OAAO,CAACF,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACtD,CACF,CAAC,CAEDrC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAwC,WAAW,CAAGnC,kBAAkB,CAACI,IAAI,CAAE,KAAO,CAAAM,IAAI,EAAK,CAC3Da,OAAO,CAACb,IAAI,CAAC,CACb,GAAIA,IAAI,CAAE,CACR,KAAM,CAAAgB,gBAAgB,CAAChB,IAAI,CAAC,CAC9B,CAAC,IAAM,CACLc,cAAc,CAAC,IAAI,CAAC,CACtB,CACAC,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAC,CAEF,MAAO,CAAAU,WAAW,CACpB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAtB,MAAM,CAAG,KAAAA,CAAOuB,KAAa,CAAEC,QAAgB,GAAK,CACxD,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAA1C,0BAA0B,CAACQ,IAAI,CAAEgC,KAAK,CAAEC,QAAQ,CAAC,CACtE,KAAM,CAAAX,gBAAgB,CAACY,MAAM,CAAC5B,IAAI,CAAC,CACnC,MAAO,CAAA4B,MAAM,CACf,CAAE,MAAON,KAAU,CAAE,CACnB,GAAIA,KAAK,CAACO,IAAI,GAAK,wBAAwB,CAAE,CAC3C,KAAM,IAAI,CAAAC,KAAK,CAAC,kDAAkD,CAAC,CACrE,CACA,KAAM,CAAAR,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAlB,MAAM,CAAG,KAAAA,CAAOsB,KAAa,CAAEC,QAAgB,GAAK,CACxD,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAzC,8BAA8B,CAACO,IAAI,CAAEgC,KAAK,CAAEC,QAAQ,CAAC,CAC1E,KAAM,CAAAlC,qBAAqB,CAACmC,MAAM,CAAC5B,IAAI,CAAC,CACxC,MAAO,CAAA4B,MAAM,CACf,CAAC,CAED,KAAM,CAAAxC,OAAO,CAAG,KAAAA,CAAA,GAAY,CAC1B,GAAI,CACF,KAAM,CAAAC,eAAe,CAACK,IAAI,CAAC,CAC3BoB,cAAc,CAAC,IAAI,CAAC,CACpB;AACAiB,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC,CACtC,CAAE,MAAOV,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAjB,aAAa,CAAG,KAAO,CAAAqB,KAAa,EAAK,CAC7C,GAAI,CACF,KAAM,CAAAnC,sBAAsB,CAACG,IAAI,CAAEgC,KAAK,CAAC,CAC3C,CAAE,MAAOJ,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAhB,kBAAkB,CAAG,KAAO,CAAA2B,WAAmB,EAAK,CACxD,GAAI,CACF,GAAI,CAACjC,IAAI,CAAE,KAAM,IAAI,CAAA8B,KAAK,CAAC,mBAAmB,CAAC,CAC/C,KAAM,CAAAtC,cAAc,CAACQ,IAAI,CAAEiC,WAAW,CAAC,CACzC,CAAE,MAAOX,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAf,iBAAiB,CAAG,KAAO,CAAAY,IAA0B,EAAK,CAC9D,GAAI,CACF,GAAI,CAACnB,IAAI,CAAE,KAAM,IAAI,CAAA8B,KAAK,CAAC,mBAAmB,CAAC,CAC/C,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAtB,GAAG,CAACuC,GAAG,CAAC,gBAAgB,CAAEf,IAAI,CAAC,CACtDL,cAAc,CAACG,QAAQ,CAACE,IAAI,CAAC,CAC/B,CAAE,MAAOG,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAd,uBAAuB,CAAG,KAAAA,CAAA,GAAY,CAC1C,GAAI,CACF,GAAI,CAACR,IAAI,CAAE,KAAM,IAAI,CAAA8B,KAAK,CAAC,mBAAmB,CAAC,CAC/C,KAAM,CAAArC,qBAAqB,CAACO,IAAI,CAAC,CACjCJ,KAAK,CAACuC,OAAO,CAAC,mDAAmD,CAAC,CACpE,CAAE,MAAOb,KAAU,CAAE,CACnB,GAAIA,KAAK,CAACO,IAAI,GAAK,wBAAwB,CAAE,CAC3C,KAAM,IAAI,CAAAC,KAAK,CAAC,2DAA2D,CAAC,CAC9E,CACA,KAAM,CAAAR,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAc,KAAK,CAAG,CACZpC,IAAI,CACJC,WAAW,CACXC,OAAO,CACPC,MAAM,CACNC,MAAM,CACNhB,OAAO,CACPiB,aAAa,CACbC,kBAAkB,CAClBC,iBAAiB,CACjBC,uBACF,CAAC,CAED,mBACEV,IAAA,CAACC,WAAW,CAACsC,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAxB,QAAA,CAChC,CAACV,OAAO,EAAIU,QAAQ,CACD,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}